#!/bin/bash

# OSX Document Root
OSX_WWW='/Library/WebServer';

# Rest UNIX
REST_WWW='/var/www';


# Debian's Apache conf dir
DEB_CONF='/etc/apache2';

# Rest
REST_CONF='/etc/httpd';

# Default location
APP_CLI_PATH='/etc/apache-cli';

# Product name
APP_CLI_NAME='Apache CLI Tools';

# App conf file name
APP_CONF_NAME='config.sh';

# Bin path (empty)
BIN_PATH='';

# Apache CLI version
APP_CLI_VER='0.3';

SCRIPTPATH=$(cd "$(dirname "$0")"; pwd);

USERNAME=$(whoami);

echo "$USERNAME";
exit;

setEditor() {
  echo '5. Enter name of default text editor for hosts ("vi" by default) or leave empty for default value.';
  read -p "Edit .conf files with: " DEF_EDITOR;
  if [ -z "$DEF_EDITOR" ]; then
    DEF_EDITOR='vi';
  fi;
  checkConfig;
}

checkBinDir() {
  if [ -d '/usr/local/bin' ]; then
    BIN_PATH='/usr/local/bin';
  else
    BIN_PATH='/usr/bin';
  fi;
}

setConfig() {
  echo "1. Enter the path to apache configs folder (usualy '/etc/apache2' or '/etc/httpd') or leave empty for autodetect"
  echo "";
  promptConfig
  
}

detectConfPath() {
 echo '- Setup is trying to detect the path to config folder...';
  if [ -d "$DEB_CONF" ]; then
    DIR_CONFIG="$DEB_CONF";
    confDetected;
  elif [ -d "$REST_CONF" ]; then
    DIR_CONFIG="$REST_CONF"; 
    confDetected;
  else
    echo "Cannot detect path, enter the path to Apache config folder:"
    promptConfig;
  fi;
}

confDetected() {
  echo "- Apache config path detected: $DIR_CONFIG";
  setHostsPath;
}

detectHostsPath() {
    echo '- Setup is trying to detect the path to apache 'www' folder...';
    if [ -d "$REST_WWW" ]; then
      DIR_HOSTS="$REST_WWW";
      wwwDetectSuccess;
    elif [ -d "$OSX_WWW" ]; then
      DIR_HOSTS="$OSX_WWW";
      wwwDetectSuccess;
    else
      echo "- Setup can't find Apache 'www' folder :(";
      promptHosts;
    fi;  
}

wwwDetectSuccess() {
  echo "- Apache 'www' folder detected: $DIR_HOSTS";
  checkIfHostsEmpty;
}

checkIfHostsEmpty() {
  if [ -d "$DIR_HOSTS/hosts" ]; then
    echo "- Selected folder already has 'hosts' folder: $DIR_HOSTS";
    askRemoveHosts;
  else
    setUser;
  fi;  
}


askRemoveHosts() {
  echo -n "Rename 'hosts' to 'hosts_old' [y/n] ? ";
  read -r rmhosts;
  if [ -z "$rmhosts" ]; then
    askRemoveHosts;
  elif [ "$rmhosts" = "y" ]; then
    sudo mv "$DIR_HOSTS/hosts" "$DIR_HOSTS/hosts_old";
    DIR_HOSTS='/var/www';
    setUser;
  elif [ "$rmhosts" = "n" ]; then
    setHostsPath;
  else
    echo "'y' or 'n' only allowed.";
    askRemoveHosts;
  fi;        
}

promptConfig() {
  read -p 'Apache config path: ' DIR_CONFIG
  if [ -z "$DIR_CONFIG"]; then
    detectConfPath;
  elif [ ! -d "$DIR_CONFIG" ]; then
    echo "Path not found, try again:";
    promptConfig;
  else
    setHostsPath;
  fi;
}

setHostsPath() {
  echo "2. Enter the path for virtual hosts folder (or leave empty for default value)"
  promptHosts
}

promptHosts() {
  read -p "Folder for hosts directory: " DIR_HOSTS
  if [ -z "$DIR_HOSTS" ]; then
    detectHostsPath;
  elif [ ! -d "$DIR_HOSTS" ]; then
    echo "Path not found, try again:";
    promptHosts;
  else
    checkIfHostsEmpty;  
  fi;
}

checkUserName() {
  grep "$USR_NAME" /etc/passwd
  if [ $? -ne 0 ]; 
  then
        echo "- WARNING! Username $USR_NAME doesn't exists.";
  fi
}

setUser() {
  echo "3. Enter username for hosts folder ownership (or leave empty for current user):"
  read -p "Username: " USR_NAME
  if [ -z "$USR_NAME" ]; then
    USR_NAME='$USER';
    setGroup;
  else
    checkUserName;  
  fi;
}

setGroup() {
  echo "4. Enter also group name for folder owner (or leave empty for the same as user name)."
  echo "   TIP: We recommend to use 'wheel' group in case if you're sudo user.";
  echo "";
  promptGrp;
}

promptGrp() {
  read -p 'Group name: ' USR_GROUP;
  if [ -z "$USR_GROUP" ]; then
    USR_GROUP="$USR_NAME";
  fi;
  setEditor;
}

checkConfig() {
  clear;
  echo "Please check your configuration:";
  echo "";
  echo " ** LOCATION ** "
  echo " - Apache configuration path:";
  echo "      $DIR_CONFIG";
  echo " - Path for virtual hosts folder:";
  echo "      $DIR_HOSTS";
  echo " - Virtual hosts will be stored in:";
  echo "      $DIR_HOSTS/hosts";
  echo "";
  echo " ** FOLDERS OWNERSHIP ** ";
  echo " - Default user owner for hosts:";
  if [ "$USR_NAME" = '$USER' ]; then
    echo "      [ Hostname creator ]";
  else
    echo "      $USR_NAME";
  fi;    
  echo " - Default group owner for hosts:";
  echo "      $USR_GROUP";
  echo "";
  echo "** ETC **";
  echo " - Default .conf editor:";
  echo "      $DEF_EDITOR";
  echo "";
  echo "";
  askCheckCfg;    
}

askCheckCfg() {
  read -p 'Is it OK [y/n] ? ' rmhosts;
  if [ "$rmhosts" = "y" ]; then
    installNow;
  elif [ "$rmhosts" = "n" ]; then
    echo "- Setup will be restarted from the beginning...";
    sleep 1;
    main;
  else
    echo "'y' or 'n' only allowed.";
    askCheckCfg;
  fi;
}

installNow() {
  clear;
  echo "**** Installing $APP_CLI_NAME ****";
  echo "";

  copyApp;

  chmodBins;

  smlink 'create-host';
  smlink 'delete-host';
  smlink 'edit-host';
  smlink 'apache-cli-remove';
  # smlink 'apache-cli-config.sh';

  genConfig;

  sleep 1;
  install_finish_lol;

}

genConfig() {
  echo ' - Generating configuration...';
  sudo printf "#!/bin/bash\n\n" > "$APP_CLI_PATH/$APP_CONF_NAME";
  sudo printf "# $APP_CLI_NAME [$APP_CLI_VER] CONFIGURATION\n" >> "$APP_CLI_PATH/$APP_CONF_NAME";

  conf_set 'APP_CLI_VER' "$APP_CLI_VER";
  conf_set 'APP_CLI_NAME' "$APP_CLI_NAME";
  conf_set 'DIR_CONF' "$DIR_CONFIG";
  conf_set 'DIR_HOSTS' "$DIR_HOSTS";
  conf_set 'USR_NAME' "$USR_NAME";
  conf_set 'USR_GROUP' "$USR_GROUP";
  conf_set 'CONF_EDITOR' "$DEF_EDITOR";
}

function conf_set {
  sudo printf "$1=\"$2\"\n"  >> "$APP_CLI_PATH/$APP_CONF_NAME";
}


copyApp() {
  echo ' - Copying binaries...';
  sudo cp -rf "$SCRIPTPATH/apache-cli" "$APP_CLI_PATH";
}



chmodBins() {
  echo ' - Applying permissions...';
  sudo chmod 777 "$APP_CLI_PATH";
}


function smlink {
  echo " - Creating symlink: "
  echo "    '$APP_CLI_PATH/$1' -> '$BIN_PATH/$1'";
  sudo ln -s "$APP_CLI_PATH/$1" "$BIN_PATH/$1";
}





checkIfInstalled() {
  if [ -d "$APP_CLI_PATH" ]; then
    echo "$APP_CLI_NAME is already installed in:";
    echo "- $APP_CLI_PATH";
    echo "";
    echo "To reinstall application, run 'apache-cli-remove'";
    exit;
  fi;
}

install_finish_lol() {
  clear;
  echo "$APP_CLI_NAME is installed successfuly!";
  echo "";
  echo "Here is available tools list:";
  echo "'create-host'         - Create a new virtual host";
  echo "'delete-host'         - Remove a virtual host";
  echo "'edit-host'           - Edit configuration for the host";
  echo "'apache-cli-remove'   - Uninstall $APP_CLI_NAME";
  echo "";
}

main() {
  clear
  checkBinDir;
  checkIfInstalled;
  echo "Wellcome to $APP_CLI_NAME Installer";
  echo "";
  setConfig;
}

main;
